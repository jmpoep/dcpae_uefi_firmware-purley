/*++
  This file contains an 'Intel Peripheral Driver' and is
  licensed for Intel CPUs and chipsets under the terms of your
  license agreement with Intel or your vendor.  This file may
  be modified by the user, subject to additional terms of the
  license agreement
--*/
/*++

Copyright 1996 - 2016, Intel Corporation.

This source code and any documentation accompanying it ("Material") is furnished
under license and may only be used or copied in accordance with the terms of that
license.  No license, express or implied, by estoppel or otherwise, to any
intellectual property rights is granted to you by disclosure or delivery of these
Materials.  The Materials are subject to change without notice and should not be
construed as a commitment by Intel Corporation to market, license, sell or support
any product or technology.  Unless otherwise provided for in the license under which
this Material is provided, the Material is provided AS IS, with no warranties of
any kind, express or implied, including without limitation the implied warranties
of fitness, merchantability, or non-infringement.  Except as expressly permitted by
the license for the Material, neither Intel Corporation nor its suppliers assumes
any responsibility for any errors or inaccuracies that may appear herein.  Except
as expressly permitted by the license for the Material, no part of the Material
may be reproduced, stored in a retrieval system, transmitted in any form, or
distributed by any means without the express written consent of Intel Corporation.

  Module Name:

    EistProc.asi

  Abstract:

    Contains the common _PDC, _PCT, _PSS, NPSS, SPSS, objects for processors

NOTES:-
  This Processor Power Management BIOS Source Code is furnished under license
  and may only be used or copied in accordance with the terms of the license.
  The information in this document is furnished for informational use only, is
  subject to change without notice, and should not be construed as a commitment
  by Intel Corporation. Intel Corporation assumes no responsibility or liability
  for any errors or inaccuracies that may appear in this document or any
  software that may be provided in association with this document.

  Except as permitted by such license, no part of this document may be
  reproduced, stored in a retrieval system, or transmitted in any form or by
  any means without the express written consent of Intel Corporation.

  WARNING: You are authorized and licensed to install and use this BIOS code
  ONLY on an IST PC. This utility may damage any system that does not
  meet these requirements.

  An IST PC is a computer which
  (1) Is capable of seamlessly and automatically transitioning among
      multiple performance states (potentially operating at different
      efficiency ratings) based upon power source changes, end user
      preference, processor performance demand, and thermal conditions; and
  (2) Includes an Intel Pentium II processors, Intel Pentium III
      processor, Mobile Intel Pentium III Processor-M, Mobile Intel Pentium 4
      Processor-M, Intel Pentium M Processor, or any other future Intel
      processors that incorporates the capability to transition between
      different performance states by altering some, or any combination of,
      the following processor attributes: core voltage, core frequency, bus
      frequency, number of processor cores available, or any other attribute
      that changes the efficiency (instructions/unit time-power) at which the
      processor operates.

--*/


  External (TYPE, FieldUnitObj)
  External (SCKN, FieldUnitObj)

    Name(NCPU, 0x80000000)
    Name(DOMN, 0x80000000)

    //
    // _PDC Flag Bit definitions:
    //     [00] = If set, OSPM is capable of direct access to Performance State MSR's
    //     [01] = If set, OSPM supports the C1 "I/O then Halt" FFh sequence for
    //            multi-processor configuation
    //     [02] = If set, OSPM is capable of direct access to On Demand throttling MSR's
    //     [03] = If set, OSPM is capable of independent C1, P state and T state support
    //            for each processor for multi-processor configuations. This bit does not
    //            indicate support for asymmetrical _CST, _PSS, or _TSS objects for
    //            individual processors in the system.
    //     [04] = If set, OSPM is capable of independent C2 and C3 state support for each
    //            processor for multi-processor configuations. This bit does not
    //            indicate support for asymmetrical _CST objects for individual
    //            processors in the system.
    //     [05] = If set, OSPM is capable of native P state software coordination using
    //            BIOS supplied _PSD information for multi-processor configuations.
    //     [06] = If set, OSPM is capable of native C state software coordination using
    //            BIOS supplied _CSD information for multi-processor configuations.
    //     [07] = If set, OSPM is capable of native ACPI throttling software coordination
    //            using BIOS supplied _TSD information for multi-processor configuations.
    //     [08] = If set, OSPM is capable of performing native C state instructions (beyond
    //            halt) for the C1 handler in multi-processor configuations.
    //     [09] = If set, OSPM is capable of performing native C state instructions for
    //            the C2/C3 handlers in multi-processor configuations.
    //     [10] = Reserved
    //     [11] = OSPM is capable of hardware coordination of P states.
    //  [31:12] = Reserved
    //
    //

    Method(_PPC, 0)
    {
#if SPS_SUPPORT
      Or(PETE, 0x80, PETE) // Confirm P-states support on this system
      Return(DeRefOf(Index(PSLM, SCKN))) // P-state limit for this socket
#else
      Return(0)
#endif
    }

    //
    //    00:  Generic Regiser Descriptor
    // 01-02:  Length
    //    03:  Address space ID, _ASI, System IO
    //    04:  Regiser Bit width
    //    05:  Regiser Bit offset
    //    06:  Reseveed
    // 06-14:  _ADR  64bit
    // 15-16:  End Tag
    //

    //
    // Native - Processor Performance Control
    //
    Name(NPCT, Package ()
    {
        ResourceTemplate(){Register(FFixedHW, 0, 0, 0)}, // control
        ResourceTemplate(){Register(FFixedHW, 0, 0, 0)}  // status
    })

    Name(SPCT, Package () {
      //
      // ResourceTemplate for Emulated IO control port 0880h
      //
      Buffer() {0x82, 0x0c, 0x00, 0x01, 0x10, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00 },
      //
      // ResourceTemplate for Emulated IO control port 0882h
      //
      Buffer() {0x82, 0x0c, 0x00, 0x01, 0x10, 0x00, 0x00, 0x82, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00 }
    })  // End of NPCT (Native PPC)

    //
    // Processor Performance Control
    //
    Method(_PCT,0) {
       Return(NPCT)
    }
    
    Name(ZPSS, Package() {
      Package(){0, 0, 0, 0, 0, 0}
    })
    
	//
    // Native - Performance States Supported
    // Put package NPSS first and then SPSS, and then _PSS method, do not change the order
    // Platform will update the package by searching the first NPSS/SPSS
    //
    Name(NPSS,Package() {
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P0
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P1
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P2
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P3
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P4
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P5
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P6
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P7
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P8
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P9
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P10
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P11
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P12
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P13
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P14
      Package(){0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000},  // P15
    })

    //
    // Performance States Supported
    //
    Method(_PSS,0)
    {
      If (LAnd(PSEN, LLess(HWEN,2)))
      {
        Return(NPSS)    // Return native P-states table
      }
      Return(ZPSS)
    }

