/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++

  Copyright (c) 2018 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under
  a license and may only be used or copied in accordance with the terms
  of the license.  Except as permitted by such license, no part of this
  software or documentation may be reproduced, stored in a retrieval
  system, or transmitted in any form or by any means without the express
  written consent of Intel Corporation.

Module Name:

  Pmtt.aslc

Abstract:

  This file contains a structure definition for the ACPI
  Platform Memory Topology Table (PMTT).

--*/

#include <Acpi/Pmtt.h>
//
// PMTT Table
//
#define PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMPONENT_IDENTIFIER_TYPE_DIMM,          \
  EFI_ACPI_RESERVED_BYTE,                           \
  sizeof (ACPI_PMTT_DIMM_DEVICE),                   \
  0x00000000,                                       \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  EFI_ACPI_RESERVED_BYTE,                           \
  0x00000000,                                       \
  0xFFFFFFFF,

#define MEM_IMC                               \
  EFI_ACPI_TOP_LEVEL_IMC,                     \
  EFI_ACPI_RESERVED_BYTE,                     \
  sizeof (ACPI_PMTT_IMC_DEVICE),              \
  0x00000000,                                 \
  EFI_ACPI_RESERVED_BYTE,                     \
  0x00000000,                                 \
  0x00000000,                                 \
  0x00000000,                                 \
  0x00000000,                                 \
  0x00000000,                                 \
  0x00000000,                                 \
  EFI_ACPI_RESERVED_BYTE,                     \
  0x00000001,                                 \
  0x00000000,                                 \
  PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMP_IDENTIFIER                    \
  PHYSICAL_COMP_IDENTIFIER

#define SKT_LEVEL                             \
  EFI_ACPI_TOP_LEVEL_SOCKET,                  \
  EFI_ACPI_RESERVED_BYTE,                     \
  sizeof (ACPI_PMTT_SOCKET_DEVICE),           \
  0x00000000,                                 \
  EFI_ACPI_RESERVED_BYTE,                     \
  0x00000000,                                 \
  EFI_ACPI_RESERVED_BYTE,                     \
  MEM_IMC                                     \
  MEM_IMC


ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE mPmttTable = {
  ACPI_PMTT_TABLE_SIGNATURE,                          // Signature 'PMTT'
  sizeof (ACPI_PLATFORM_MEMORY_TOPOLOGY_TABLE),       // Length
  ACPI_PMTT_TABLE_REVISION,                           // Revision
  0x00,                                               // CheckSum
  'I', 'N', 'T', 'E', 'L', ' ',                       // OemId
  0,                                                  // OemTableId
  ACPI_PMTT_OEM_REVISION,                             // OemRevision
  EFI_ACPI_CREATOR_ID,                                // CreaterId
  EFI_ACPI_CREATOR_REVISION,                          // CreaterRevision
  EFI_ACPI_RESERVED_BYTE,                             // Reserved[0]
  EFI_ACPI_RESERVED_BYTE,                             // Reserved[1]
  EFI_ACPI_RESERVED_BYTE,                             // Reserved[2]
  EFI_ACPI_RESERVED_BYTE,                             // Reserved[3]
  SKT_LEVEL
#if  MAX_SOCKET > 1
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 2
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 3
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 4
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 5
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 6
  SKT_LEVEL
#endif
#if  MAX_SOCKET > 7
  SKT_LEVEL
#endif
};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  return (VOID*)&mPmttTable;
}

