/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++

  Copyright (c) 2001 - 2018, Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under
  a license and may only be used or copied in accordance with the terms
  of the license.  Except as permitted by such license, no part of this
  software or documentation may be reproduced, stored in a retrieval
  system, or transmitted in any form or by any means without the express
  written consent of Intel Corporation.

  Module Name:

    CommonPlatform.asi

  Abstract:

    Contains common objects for the platform

--*/
#include "MaxSocket.h"

  //
  // External declarations
  // HECI-1/HECI-2 are in PurleyPlatPkg\Me\Sps\Acpi\SpsNm.asl
  //
  External(\_SB.PC00.HEC2.HPTS, MethodObj)
  External(\_SB.PC00.HEC2.HWAK, MethodObj)

  //
  // System Sleep States
  //
  Name (\_S0,Package (){0,0,0,0})
  Name (\_S3,Package (){5,0,0,0})   // Name changed to \DS3 if disabled in Setup
  Name (\_S4,Package (){6,0,0,0})   // Name changed to \DS4 if disabled in Setup
  Name (\_S5,Package (){7,0,0,0})

  //
  // Native OS hot plug support, 0->ACPI, 1->OS
  //
  Name (\OSHF, 0)

  //
  // OS flag
  //
  #include "Os.asi"

  //
  // for determing PIC mode
  //
  Name (\PICM,Zero)
  Method (\_PIC, 1, NotSerialized) {
    Store(Arg0,\PICM)
  }

  OperationRegion (DBG0, SystemIO, 0x80, 2)
  Field (DBG0, ByteAcc,NoLock,Preserve) {
    IO80, 8,
    IO81, 8
  }

  //
  // Access CMOS range
  //
  OperationRegion (ACMS, SystemIO, 0x72, 2)
  Field ( ACMS, ByteAcc, NoLock, Preserve) {
    INDX, 8,
    DATA, 8
  }

  //
  // SWGPE_CTRL
  //
  OperationRegion (GPCT, SystemIO, 0x442, 1)
  Field ( GPCT, ByteAcc, NoLock, Preserve) {
          ,   1,
    SGPC  ,   1,
  }

  //
  // GPI_INV
  //
  OperationRegion (GPIV, SystemIO, 0x52c, 2)
  Field ( GPIV, ByteAcc, NoLock, Preserve) {
    GP0I  ,   1,
  }


  //
  // BIOS parameter BIOS_ACPI_PARAM
  //
  OperationRegion (PSYS, SystemMemory, 0x30584946, 0x480) // (FIX0 - Patched by ACPI Platform Driver during POST)
  Field (PSYS, ByteAcc, NoLock, Preserve) {
    // IOAPIC Start
    PLAT   ,  32,   // Platform ID
    Offset (0x04),  //
#if MAX_SOCKET > 4
    AP00   ,   1,   // PC00 IOAPIC Enable
    AP01   ,   1,   // PC01 IOAPIC Enable
    AP02   ,   1,   // PC02 IOAPIC Enable
    AP03   ,   1,   // PC03 IOAPIC Enable
    AP04   ,   1,   // PC04 IOAPIC Enable
    AP05   ,   1,   // PC05 IOAPIC Enable
    AP06   ,   1,   // PC06 IOAPIC Enable
    AP07   ,   1,   // PC07 IOAPIC Enable
    AP08   ,   1,   // PC08 IOAPIC Enable
    AP09   ,   1,   // PC09 IOAPIC Enable
    AP10   ,   1,   // PC10 IOAPIC Enable
    AP11   ,   1,   // PC11 IOAPIC Enable
    AP12   ,   1,   // PC12 IOAPIC Enable
    AP13   ,   1,   // PC13 IOAPIC Enable
    AP14   ,   1,   // PC14 IOAPIC Enable
    AP15   ,   1,   // PC15 IOAPIC Enable
    AP16   ,   1,   // PC16 IOAPIC Enable
    AP17   ,   1,   // PC17 IOAPIC Enable
    AP18   ,   1,   // PC18 IOAPIC Enable
    AP19   ,   1,   // PC19 IOAPIC Enable
    AP20   ,   1,   // PC20 IOAPIC Enable
    AP21   ,   1,   // PC21 IOAPIC Enable
    AP22   ,   1,   // PC22 IOAPIC Enable
    AP23   ,   1,   // PC23 IOAPIC Enable
    AP24   ,   1,   // PC24 IOAPIC Enable
    AP25   ,   1,   // 8S PC25 IOAPIC Enable
    AP26   ,   1,   // 8S PC26 IOAPIC Enable
    AP27   ,   1,   // 8S PC27 IOAPIC Enable
    AP28   ,   1,   // 8S PC28 IOAPIC Enable
    AP29   ,   1,   // 8S PC29 IOAPIC Enable
    AP30   ,   1,   // 8S PC30 IOAPIC Enable
    AP31   ,   1,   // 8S PC31 IOAPIC Enable
#else
    APC0   ,   1,   // PCH IOAPIC Enable
    AP00   ,   1,   // PC00 IOAPIC Enable
    AP01   ,   1,   // PC01 IOAPIC Enable
    AP02   ,   1,   // PC02 IOAPIC Enable
    AP03   ,   1,   // PC03 IOAPIC Enable
    AP04   ,   1,   // PC04 IOAPIC Enable
    AP05   ,   1,   // PC05 IOAPIC Enable
    AP06   ,   1,   // PC06 IOAPIC Enable
    AP07   ,   1,   // PC07 IOAPIC Enable
    AP08   ,   1,   // PC08 IOAPIC Enable
    AP09   ,   1,   // PC09 IOAPIC Enable
    AP10   ,   1,   // PC10 IOAPIC Enable
    AP11   ,   1,   // PC11 IOAPIC Enable
    AP12   ,   1,   // PC12 IOAPIC Enable
    AP13   ,   1,   // PC13 IOAPIC Enable
    AP14   ,   1,   // PC14 IOAPIC Enable
    AP15   ,   1,   // PC15 IOAPIC Enable
    AP16   ,   1,   // PC16 IOAPIC Enable
    AP17   ,   1,   // PC17 IOAPIC Enable
    AP18   ,   1,   // PC18 IOAPIC Enable
    AP19   ,   1,   // PC19 IOAPIC Enable
    AP20   ,   1,   // PC20 IOAPIC Enable
    AP21   ,   1,   // PC21 IOAPIC Enable
    AP22   ,   1,   // PC22 IOAPIC Enable
    AP23   ,   1,   // PC23 IOAPIC Enable
    RESA   ,   7,  // Unused
#endif
    Offset (0x08),
    SKOV   ,   1,   // Override ApicId socket field
    RES0   ,   7,   // Unused
    // IOAPIC End

    // Power Managment Start
    Offset (0x09),
    TPME   ,  1,    // TPM Enable
    CSEN   ,  1,    // C State Enable
    C3EN   ,  1,    // OS C3 Report Enbale
    C6EN   ,  1,    // C6 Enable
    C7EN   ,  1,    // C7 Enable
    MWOS   ,  1,    // MWAIT support Enable
    PSEN   ,  1,    // P State Enable
    EMCA   ,  1,    // EMCA Enable
    Offset (0x0A),
    HWAL   ,  2,    // PSD HW_ALL Enable
    KPRS   ,  1,    // KB present Flag
    MPRS   ,  1,    // Mouse present Flag
    TSEN   ,  1,    // T State Enable Flag
    FGTS   ,  1,    // Fine grained T state Flag
    OSCX   ,  1,    // OS C States
    PBFE   ,  1,    // Prioritized Base Frequency
    // Power Management End

    // RAS Start
    Offset (0x0B),
    CPHP   ,  8,    // Bit field for determining CPU hotplug event is happening, Update every time CPU Hotpug event is registered as valid
                    // Bit0 CPU0 O*L Request
                    // Bit1 CPU1 O*L Request
                    // Bit2 CPU2 O*L Request
                    // Bit3 CPU3 O*L Request
                    // Bit4-7 Reserved
    IIOP   ,  8,    // Bit field for determining IIO hotplug event is happening, Update every time IIO Hotpug event is registered as valid
                    // Bit0 IIO1 O*L Request
                    // Bit1 IIO2 O*L Request
                    // Bit2 IIO3 O*L Request
                    // Bit3-7 Reserved
    IIOH   , 64,    // IIO bit Mask, what IIOs are present for STA method, Update every time IIO hotplug event happens and at boot time (Patched by ACPI Platform Driver during POST)
    PRBM   , 32,    // Processor Bit mask, what sockets are present for STA method, Update every time hotplug event happen and at boot time (Patched by ACPI Platform Driver during POST)
    P0ID   , 32,    // Processor 0 APIC ID base
    P1ID   , 32,    // Processor 1 APIC ID base
    P2ID   , 32,    // Processor 2 APIC ID base
    P3ID   , 32,    // Processor 3 APIC ID base
    P4ID   , 32,    // Processor 4 APIC ID base
    P5ID   , 32,    // Processor 5 APIC ID base
    P6ID   , 32,    // Processor 6 APIC ID base
    P7ID   , 32,    // Processor 7 APIC ID base
    P0BM   , 64,    // Processor 0 Bit mask, what cores are present for STA method
    P1BM   , 64,    // Processor 1 Bit mask, what cores are present for STA method
    P2BM   , 64,    // Processor 2 Bit mask, what cores are present for STA method
    P3BM   , 64,    // Processor 3 Bit mask, what cores are present for STA method
    P4BM   , 64,    // Processor 4 Bit mask, what cores are present for STA method
    P5BM   , 64,    // Processor 5 Bit mask, what cores are present for STA method
    P6BM   , 64,    // Processor 6 Bit mask, what cores are present for STA method
    P7BM   , 64,    // Processor 7 Bit mask, what cores are present for STA method
    MEBM   , 16,    // Memory controller bit mask what memory controllers are present, for STA Method
    MEBC   , 16,    // Memory controller change event mask what memory controllers have been changed, for notify
    CFMM   , 32,    // MMCFG Base
    TSSZ   , 32,    // TSEG Size.
    M0BS   , 64,    // Memory Controller Base 0
    M1BS   , 64,    // Memory Controller Base 1
    M2BS   , 64,    // Memory Controller Base 2
    M3BS   , 64,    // Memory Controller Base 3
    M4BS   , 64,    // Memory Controller Base 4
    M5BS   , 64,    // Memory Controller Base 5
    M6BS   , 64,    // Memory Controller Base 6
    M7BS   , 64,    // Memory Controller Base 7
    M8BS   , 64,    // Memory Controller Base 8
    M9BS   , 64,    // Memory Controller Base 9
    MABS   , 64,    // Memory Controller Base 10
    MBBS   , 64,    // Memory Controller Base 11
    MCBS   , 64,    // Memory Controller Base 12
    MDBS   , 64,    // Memory Controller Base 13
    MEBS   , 64,    // Memory Controller Base 14
    MFBS   , 64,    // Memory Controller Base 15
    M0RN   , 64,    // Memory Controller Range 0
    M1RN   , 64,    // Memory Controller Range 1
    M2RN   , 64,    // Memory Controller Range 2
    M3RN   , 64,    // Memory Controller Range 3
    M4RN   , 64,    // Memory Controller Range 4
    M5RN   , 64,    // Memory Controller Range 5
    M6RN   , 64,    // Memory Controller Range 6
    M7RN   , 64,    // Memory Controller Range 7
    M8RN   , 64,    // Memory Controller Range 8
    M9RN   , 64,    // Memory Controller Range 9
    MARN   , 64,    // Memory Controller Range 10
    MBRN   , 64,    // Memory Controller Range 11
    MCRN   , 64,    // Memory Controller Range 12
    MDRN   , 64,    // Memory Controller Range 13
    MERN   , 64,    // Memory Controller Range 14
    MFRN   , 64,    // Memory Controller Range 15
    SMI0   , 32,    // Parameter0 used for faked SMI request
    SMI1   , 32,    // Parameter1 used for faked SMI request
    SMI2   , 32,    // Parameter2 used for faked SMI request
    SMI3   , 32,    // Parameter3 used for faked SMI request
    SCI0   , 32,    // Parameter0 used for faked SCI request
    SCI1   , 32,    // Parameter1 used for faked SCI request
    SCI2   , 32,    // Parameter2 used for faked SCI request
    SCI3   , 32,    // Parameter3 used for faked SCI request
    MADD   , 64,    // Migration ActionRegion GAS address. (Migration support written for 8 CPU socket system. In a 4 socket system, CPU4-7 and MEM8-15 are invalid.)
    CUU0   , 128,   // CPU0 UUID
    CUU1   , 128,   // CPU1 UUID
    CUU2   , 128,   // CPU2 UUID
    CUU3   , 128,   // CPU3 UUID
    CUU4   , 128,   // CPU4 UUID
    CUU5   , 128,   // CPU5 UUID
    CUU6   , 128,   // CPU6 UUID
    CUU7   , 128,   // CPU7 UUID
    CPSP   , 8,     // CPU spare bitmap. 1 == IsSpare.
    ME00   , 128,   // MEM0 UUID
    ME01   , 128,   // MEM1 UUID
    ME10   , 128,   // MEM2 UUID
    ME11   , 128,   // MEM3 UUID
    ME20   , 128,   // MEM4 UUID
    ME21   , 128,   // MEM5 UUID
    ME30   , 128,   // MEM6 UUID
    ME31   , 128,   // MEM7 UUID
    ME40   , 128,   // MEM8 UUID
    ME41   , 128,   // MEM9 UUID
    ME50   , 128,   // MEM10 UUID
    ME51   , 128,   // MEM11 UUID
    ME60   , 128,   // MEM12 UUID
    ME61   , 128,   // MEM13 UUID
    ME70   , 128,   // MEM14 UUID
    ME71   , 128,   // MEM15 UUID
    MESP   , 16,    // Memory module spare bitmap. 1 == IsSpare.
    LDIR   , 64,    // L1 Directory Address
    PRID   , 32,    // Processor ID
    AHPE   , 8,     // ACPI PCIe hot plug enable.
    // RAS End

    // VTD Start
    DHRD   , 192,   // DHRD
    ATSR   , 192,   // ATSR
    RHSA   , 192,   // RHSA
    // VTD End

    // SR-IOV WA Start
    WSIC   , 8,
    WSIS   , 16,
    WSIB   , 8,
    WSID   , 8,
    WSIF   , 8,
    WSTS   , 8,
    WHEA   , 8,
    // SR-IOV WA End

    // BIOS Guard Start
    BGMA   , 64,    // BIOS Guard Memory Address
    BGMS   , 8,     // BIOS Guard Memory Size
    BGIO   , 16,    // BIOS Guard IO Trap Address
    CNBS   , 8,     // CPU SKU number bit shift
    // BIOS Guard End

    // USB3 Start
    XHMD   , 8,     // copy of setup item PchUsb30Mode
    SBV1   , 8,     // USB Sideband Deferring GPE Vector (HOST_ALERT#1)
    SBV2   , 8,     // USB Sideband Deferring GPE Vector (HOST_ALERT#2)
    // USB3 End

    // HWPM Start
    HWEN   ,  2,    // HWPM State Enable option from setup
    ACEN   ,  1,    // Aunomous C-state Enable option from setup
    HWPI   ,  1,    // HWP Interrupt
    RES1   ,  4,    // Reserved bits
    // HWPM End

    // PCIe Multi-Seg Start
    BB00   , 8,     // Bus Base for PC00
    BB01   , 8,     // Bus Base for PC01
    BB02   , 8,     // Bus Base for PC02
    BB03   , 8,     // Bus Base for PC03
    BB04   , 8,     // Bus Base for PC04
    BB05   , 8,     // Bus Base for PC05
    BB06   , 8,     // Bus Base for PC06
    BB07   , 8,     // Bus Base for PC07
    BB08   , 8,     // Bus Base for PC08
    BB09   , 8,     // Bus Base for PC09
    BB10   , 8,     // Bus Base for PC10
    BB11   , 8,     // Bus Base for PC11
    BB12   , 8,     // Bus Base for PC12
    BB13   , 8,     // Bus Base for PC13
    BB14   , 8,     // Bus Base for PC14
    BB15   , 8,     // Bus Base for PC15
    BB16   , 8,     // Bus Base for PC16
    BB17   , 8,     // Bus Base for PC17
    BB18   , 8,     // Bus Base for PC18
    BB19   , 8,     // Bus Base for PC19
    BB20   , 8,     // Bus Base for PC20
    BB21   , 8,     // Bus Base for PC21
    BB22   , 8,     // Bus Base for PC22
    BB23   , 8,     // Bus Base for PC23
    BB24   , 8,     // Bus Base for PC24
    BB25   , 8,     // Bus Base for PC25
    BB26   , 8,     // Bus Base for PC26
    BB27   , 8,     // Bus Base for PC27
    BB28   , 8,     // Bus Base for PC28
    BB29   , 8,     // Bus Base for PC29
    BB30   , 8,     // Bus Base for PC30
    BB31   , 8,     // Bus Base for PC31
    BB32   , 8,     // Bus Base for PC32
    BB33   , 8,     // Bus Base for PC33
    BB34   , 8,     // Bus Base for PC34
    BB35   , 8,     // Bus Base for PC35
    BB36   , 8,     // Bus Base for PC36
    BB37   , 8,     // Bus Base for PC37
    BB38   , 8,     // Bus Base for PC38
    BB39   , 8,     // Bus Base for PC39
    BB40   , 8,     // Bus Base for PC40
    BB41   , 8,     // Bus Base for PC41
    BB42   , 8,     // Bus Base for PC42
    BB43   , 8,     // Bus Base for PC43
    BB44   , 8,     // Bus Base for PC44
    BB45   , 8,     // Bus Base for PC45
    BB46   , 8,     // Bus Base for PC46
    BB47   , 8,     // Bus Base for PC47
    SGEN   , 8,     // PCIe_MultiSeg_Support enable/disable
    SG00   , 8,     // Segment ID for Segment Group 0
    SG01   , 8,     // Segment ID for Segment Group 1
    SG02   , 8,     // Segment ID for Segment Group 2
    SG03   , 8,     // Segment ID for Segment Group 3
    SG04   , 8,     // Segment ID for Segment Group 4
    SG05   , 8,     // Segment ID for Segment Group 5
    SG06   , 8,     // Segment ID for Segment Group 6
    SG07   , 8,     // Segment ID for Segment Group 7
    // PCIe Multi-Seg End

    // Performance start
    CLOD   , 8,     // SncAnd2Cluster, i.e. 1=SNC enable and 2 Clusters, 0 otherwise
    // Performance End

    // XTU Start
    XTUB   , 32,
    XTUS   , 32,
    XMBA   , 32,
    DDRF   , 8,
    RT3S   , 8,
    RTP0   , 8,
    RTP3   , 8,
    // XTU End

    // FPGA Root Port Bus
    FBB0   , 8,     // FPGA Bus Base for Socket 0
    FBB1   , 8,     // FPGA Bus Base for Socket 1
    FBB2   , 8,     // FPGA Bus Base for Socket 2
    FBB3   , 8,     // FPGA Bus Base for Socket 3
    FBB4   , 8,     // FPGA Bus Base for Socket 4
    FBB5   , 8,     // FPGA Bus Base for Socket 5
    FBB6   , 8,     // FPGA Bus Base for Socket 6
    FBB7   , 8,     // FPGA Bus Base for Socket 7

    FBL0   , 8,     // FPGA Bus limit for Socket 0
    FBL1   , 8,     // FPGA Bus limit for Socket 1
    FBL2   , 8,     // FPGA Bus limit for Socket 2
    FBL3   , 8,     // FPGA Bus limit for Socket 3
    FBL4   , 8,     // FPGA Bus limit for Socket 4
    FBL5   , 8,     // FPGA Bus limit for Socket 5
    FBL6   , 8,     // FPGA Bus limit for Socket 6
    FBL7   , 8,     // FPGA Bus limit for Socket 7

    // FPGA present bit
    P0FB   , 8,     // FPGA present in Socket 0
    P1FB   , 8,     // FPGA present in Socket 1
    P2FB   , 8,     // FPGA present in Socket 2
    P3FB   , 8,     // FPGA present in Socket 3
    P4FB   , 8,     // FPGA present in Socket 4
    P5FB   , 8,     // FPGA present in Socket 5
    P6FB   , 8,     // FPGA present in Socket 6
    P7FB   , 8,     // FPGA present in Socket 7

    // FPGA Resource Allocation
    FMB0   , 32,
    FMB1   , 32,
    FMB2   , 32,
    FMB3   , 32,
    FMB4   , 32,
    FMB5   , 32,
    FMB6   , 32,
    FMB7   , 32,

    FML0   , 32,
    FML1   , 32,
    FML2   , 32,
    FML3   , 32,
    FML4   , 32,
    FML5   , 32,
    FML6   , 32,
    FML7   , 32,

    // FPGA KTI present bitmap
    FKPB   , 32,
    // FPGA Bus for KTI
    FKB0   , 8,     // FPGA Bus Base for Socket 0 KTI Link
    FKB1   , 8,     // FPGA Bus Base for Socket 1 KTI Link
    FKB2   , 8,     // FPGA Bus Base for Socket 2 KTI Link
    FKB3   , 8,     // FPGA Bus Base for Socket 3 KTI Link
    FKB4   , 8,     // FPGA Bus Base for Socket 4 KTI Link
    FKB5   , 8,     // FPGA Bus Base for Socket 5 KTI Link
    FKB6   , 8,     // FPGA Bus Base for Socket 6 KTI Link
    FKB7   , 8,     // FPGA Bus Base for Socket 7 KTI Link
  }

  //
  // Operation region for GPI status bits
  //
  OperationRegion (GSTS, SystemIO, 0x422, 2)
  Field ( GSTS, ByteAcc, NoLock, Preserve) {
    GP00  , 1,
          , 12,
    GP13  , 1,
  }

  //
  // GPE0 HOT_PLUG_EN
  //
  OperationRegion (GPE0, SystemIO, 0x428, 8)
  Field (GPE0, ByteAcc,NoLock,Preserve) {
    ,1,
    GPEH,1,
    ,1,
    USB1,1,
    USB2,1,
    USB5,1,
    ,3,
    PCIE,1,
    ,1,
    PMEE,1,
    USB3,1,
    PMB0,1,
    USB4,1,
    ,9,
    ,1,
    ,7,
    USB6,1,
    ,15,
  }

  //
  // GPES Status
  //
  OperationRegion (GPES, SystemIO, 0x420, 8)
  Field (GPES, ByteAcc,NoLock,Preserve) {
    ,1,
    GPSH,1,
    SGPS,1,
    US1S,1,
    US2S,1,
    US5S,1,
    ,1,
    SMWS,1,
    ,1,
    PEES,1,
    ,1,
    PMES,1,

    US3S ,1,
    PMBS,1,
    US4S ,1,
    ,9,
    ,1,
    ,7,
    US6S,1,
    ,15,
  }

  //
  // System sleep down
  //
  Method (_PTS, 1, NotSerialized)
  {
    Store (0x72, IO80)  // Sync with EfiPostCode.h

    //
    // Clear wake event status.
    //
    Store(1,US1S)
    Store(1,US2S)
    Store(1,US5S)
    Store(1,SMWS)
    Store(1,PMES)
    Store(1,US3S)
    Store(1,PMBS)
    Store(1,US4S)
    Store(1,US6S)

    //
    // Enable SCI and wake event sources.
    //
    Store(1,GPEH)
    Store(1,USB1)
    Store(1,USB2)
    Store(1,USB5)
    Store(1,PCIE)
    Store(1,PMEE)
    Store(1,USB3)
    Store(1,PMB0)
    Store(1,USB4)
    Store(1,USB6)

    //
    // If HECI-2 exist call its prepare-to-sleep handler.
    // The handler checks whether HECI-2 is enabled.
    //
    If (CondRefOf(\_SB.PC00.HEC2.HPTS))
    {
      \_SB.PC00.HEC2.HPTS()
    }

    /// WA for S3 on XHCI
    \_SB.PC00.XHCI.XHCS()
  }

  //#include "Uncore.asi"

  //
  // System Wake up
  //
  Method (_WAK, 1, Serialized)
  {
    Store (0x73, IO80)  // Sync with EfiPostCode.h

    //
    // If HECI-2 exist call its wake-up handler.
    // The handler checks whether HECI-2 is enabled.
    //
    If (CondRefOf(\_SB.PC00.HEC2.HWAK))
    {
      \_SB.PC00.HEC2.HWAK()
    }

    //
    // If waking from S3
    //
    If (LEqual(Arg0, 3)) {
    }

    Return(Package(){0, 0})
  }

  Scope(\_SB) {

    // Information on CPU and Memory for hotplug SKUs
    #include "CpuMemHp.asi"

    OperationRegion (IOB2, SystemIO, 0xB2, 2)  //MKF_SMIPORT
    Field (IOB2, ByteAcc, NoLock, Preserve) {
      SMIC, 8,                               // SW-SMI ctrl port
      SMIS, 8,                               // SW-SMI status port
    }

    //
    // WHEA
    //
    #include "Whea.asi"
    //
    // NGN Dimm support
    //
    #include "NvdimmCommon.asi"
  }   // end _SB scope


