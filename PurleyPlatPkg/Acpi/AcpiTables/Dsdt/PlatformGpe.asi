/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++

  Copyright (c) 2001 - 2017, Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under 
  a license and may only be used or copied in accordance with the terms 
  of the license.  Except as permitted by such license, no part of this 
  software or documentation may be reproduced, stored in a retrieval 
  system, or transmitted in any form or by any means without the express 
  written consent of Intel Corporation.

  Module Name:

    PlatformGpe.asi

  Abstract:

    Contains root level name space objects for the platform

--*/

//  General Purpose Event
#include "MaxSocket.h"

Scope (\_GPE) {
/* This below is required by WHQL but somehow SVOS breaks when we add this
  Method (_L21, 0x0, NotSerialized) {
    Store (0x21, IO80)
  }
  Method (_L22, 0x0, NotSerialized) {
    Store (0x22, IO80)
  }
  Method (_L23, 0x0, NotSerialized) {
    Store (0x23, IO80)
  }
  Method (_L24, 0x0, NotSerialized) {
    Store (0x24, IO80)
  }
  Method (_L26, 0x0, NotSerialized) {
    Store (0x26, IO80)
  }
  Method (_L27, 0x0, NotSerialized) {
    Store (0x27, IO80)
  }
  Method (_L28, 0x0, NotSerialized) {
    Store (0x28, IO80)
  }
  Method (_L29, 0x0, NotSerialized) {
    Store (0x29, IO80)
  }   
  Method (_L2A, 0x0, NotSerialized) {
    Store (0x2A, IO80)
  }
  Method (_L2B, 0x0, NotSerialized) {
    Store (0x2B, IO80)
  }
  Method (_L2C, 0x0, NotSerialized) {
    Store (0x2C, IO80)
  }
  Method (_L2D, 0x0, NotSerialized) {
    Store (0x2D, IO80)
  }
  Method (_L2E, 0x0, NotSerialized) {
    Store (0x2E, IO80)
  }
  Method (_L2F, 0x0, NotSerialized) {
    Store (0x2F, IO80)
  }
  Method (_L30, 0x0, NotSerialized) {
    Store (0x30, IO80)
  }
  Method (_L31, 0x0, NotSerialized) {
    Store (0x31, IO80)
  }
  Method (_L32, 0x0, NotSerialized) {
    Store (0x32, IO80)
  }
  Method (_L33, 0x0, NotSerialized) {
    Store (0x33, IO80)
  }
  Method (_L34, 0x0, NotSerialized) {
    Store (0x34, IO80)
  }
  Method (_L35, 0x0, NotSerialized) {
    Store (0x35, IO80)
  }
  Method (_L36, 0x0, NotSerialized) {
    Store (0x36, IO80)
  }
  Method (_L37, 0x0, NotSerialized) {
    Store (0x37, IO80)
  }
  Method (_L38, 0x0, NotSerialized) {
    Store (0x38, IO80)
  }
  Method (_L39, 0x0, NotSerialized) {
    Store (0x39, IO80)
  }
  Method (_L3A, 0x0, NotSerialized) {
    Store (0x3A, IO80)
  }
  Method (_L3B, 0x0, NotSerialized) {
    Store (0x3B, IO80)
  }
  Method (_L3C, 0x0, NotSerialized) {
    Store (0x3C, IO80)
  }
  Method (_L3D, 0x0, NotSerialized) {
    Store (0x3D, IO80)
  }
  Method (_L3E, 0x0, NotSerialized) {
    Store (0x3E, IO80)
  }
  Method (_L3F, 0x0, NotSerialized) {
    Store (0x3F, IO80)
  }
*/

  //
  // ME HECI2 SCI handler
  // Note: This SCI from HECI2 is routed to ICH9 over the DMI and it
  // sets the DMISCI status bit in TCO block. From there it is routed
  // to bit6 GPE0 status register.
  //
  OperationRegion (TCOS, SystemIO, 0x464, 2) // ICH_ACPI_BASE_ADDRESS + TCO_BASE + R_TCO1_STS
  Field (TCOS, ByteAcc, NoLock, WriteAsZeros) {
         Offset (0x1),
         , 1,
         DSCI, 1,
  }

  // Based on Socket ID to be notified, evaluate appropriate devices.
  Method(NTFC, 2){
    If(And(Arg0, 0x01)){
      Notify(\_SB.SCK0, Arg1)
    }

#if MAX_SOCKET > 1
    If(And(Arg0, 0x02)){
      Notify(\_SB.SCK1, Arg1)
    }
#endif

#if MAX_SOCKET > 2
    If(And(Arg0, 0x04)){
      Notify(\_SB.SCK2, Arg1)
    }
#endif

#if MAX_SOCKET > 3
    If(And(Arg0, 0x08)){
      Notify(\_SB.SCK3, Arg1)
    }
#endif

#if MAX_SOCKET > 4
    If(And(Arg0, 0x10)){
      Notify(\_SB.SCK4, Arg1)
    }
#endif

#if MAX_SOCKET > 5
    If(And(Arg0, 0x20)){
      Notify(\_SB.SCK5, Arg1)
    }
#endif

#if MAX_SOCKET > 6
    If(And(Arg0, 0x40)){
      Notify(\_SB.SCK6, Arg1)
    }
#endif

#if MAX_SOCKET > 7
    If(And(Arg0, 0x80)){
      Notify(\_SB.SCK7, Arg1)
    }
#endif
  } //End Method NTFC
#if 0
  Method(NTFM, 2){
  
    // Based on Memory Board ID to be notified, evaluate appropriate devices.
    If(And(Arg0, 0x01)){
      Notify(\_SB.SCK0.M000, Arg1)
    }
    If(And(Arg0, 0x02)){
      Notify(\_SB.SCK0.M001, Arg1)
    }
#if MAX_SOCKET > 1
    If(And(Arg0, 0x04)){
      Notify(\_SB.SCK1.M000, Arg1)
    }
    If(And(Arg0, 0x08)){
      Notify(\_SB.SCK1.M001, Arg1)
    }
#endif
#if MAX_SOCKET > 2
    If(And(Arg0, 0x10)){
      Notify(\_SB.SCK2.M000, Arg1)
    }
    If(And(Arg0, 0x20)){
      Notify(\_SB.SCK2.M001, Arg1)
    }
#endif
#if MAX_SOCKET > 3
    If(And(Arg0, 0x40)){
      Notify(\_SB.SCK3.M000, Arg1)
    }
    If(And(Arg0, 0x80)){
      Notify(\_SB.SCK3.M001, Arg1)
    }
#endif

  } // End Method NTFM
#endif
  Method(NTFI, 2){
    If(And(Arg0, 0x01)){
      Notify(\_SB.PC06, Arg1)
      Notify(\_SB.PC07, Arg1)
      Notify(\_SB.PC08, Arg1)
      Notify(\_SB.PC09, Arg1)
      Notify(\_SB.PC10, Arg1)
      Notify(\_SB.PC11, Arg1)   
    }
    If(And(Arg0, 0x02)){
      Notify(\_SB.PC12, Arg1)
      Notify(\_SB.PC13, Arg1)
      Notify(\_SB.PC14, Arg1)
      Notify(\_SB.PC15, Arg1)
      Notify(\_SB.PC16, Arg1)
      Notify(\_SB.PC17, Arg1)  
    }
    If(And(Arg0, 0x04)){
      Notify(\_SB.PC18, Arg1)
      Notify(\_SB.PC19, Arg1)
      Notify(\_SB.PC20, Arg1)
      Notify(\_SB.PC21, Arg1)
      Notify(\_SB.PC22, Arg1)
      Notify(\_SB.PC23, Arg1)   
    }
  } //End Method NTFI

  // Tell OS to run thru the new status of this device (Software SCI generated from SMM for all Hot plug events)
  Method (_L62, 0x0, NotSerialized) {
    if(LEqual(SCI0, 3)) { // Device ejection (Invoked with _EJ0 method called)
      //NTFM  (SCI1, 3) 
      NTFC  (SCI2, 3)
      Store (0, SCI0)
    } ElseIf (LEqual(SCI0, 1)) { // Device check (OS can still reject online request based on resources and capability)
      NTFC (CPHP, 0)
      NTFI (IIOP, 0)
      //NTFM (MEBC, 1)
      Store (0, MEBC)
      Store (0, CPHP)
      Store (0, IIOP)
      Store (0, SCI0)
    }

    // Retrieve leaf and root notification data pre SWGPE clear
    Store(\_SB.NVDR.LPRE (), Local0)
    Store(\_SB.NVDR.RPRE (), Local1)

    Store (0, GPEC)

    // Perform NVDIMM leaf and root notifications with notification data updated post SWGPE clear
    \_SB.NVLN (\_SB.NVDR.LPST (Local0))
    \_SB.NVRN (\_SB.NVDR.RPST (Local1))

    ///
    /// Handle HWP SCI event
    ///
    //#include "HwpLvt.asi"
  }

  // PME supported for Slots, use GPE 9 for PME
  // Hot plug on all slots for now, change later.
  // Slot numbers on silk screen might be different than the port number, currently use port numbers.
  //
  // IIO PCI_E Slot Hotplug GPE Event
  //
  Method (_L61, 0, NotSerialized) {
    #include "IioPcieHotPlugGpeHandler.asl"
  }// end of _L01 GPE Method

}// end of _GPE scope.
