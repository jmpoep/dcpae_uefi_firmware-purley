/*++
  This file contains 'Framework Code' and is licensed as such
  under the terms of your license agreement with Intel or your
  vendor.  This file may not be modified, except as allowed by
  additional terms of your license agreement.
--*/
/*++
  
  Copyright (c) 2016 Intel Corporation.  All rights reserved.

  This software and associated documentation (if any) is furnished under 
  a license and may only be used or copied in accordance with the terms 
  of the license.  Except as permitted by such license, no part of this 
  software or documentation may be reproduced, stored in a retrieval system, 
  or transmitted in any form or by any means without the express written 
  consent of Intel Corporation.

  Module Name:

    FpgaKti03.asi

  Abstract:
  
    Virtual Fpga Bus
  
--*/

  Name (SUPP, 0)
  Name (CTRL, 0)

  Method(_OSC,4) {
    //
    // Create DWord-addressable fields from the capabilities Buffer
    //
    CreateDWordField(Arg3,0,CDW1)
    CreateDWordField(Arg3,4,CDW2)
    If(LGreater(Arg2,2)) {
      CreateDWordField(Arg3,8,CDW3)
    }


      If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {
        //
        // Save Capabilities DWord2 & 3
        //
        Store(CDW2,SUPP)
        Store(CDW3,CTRL)

        //
        // Only allow native hot plug control if OS supports
        // * ASPM
        // * MSI/MSI-X
        //
        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { // Conditions not met?         
          And(CTRL, 0x1E, CTRL) // Mask bit 0 to deny.
          Sleep(1000)
        }

        //
        // Never allow SHPC (no SHPC controller in system)
        //
        And(CTRL, 0x1D, CTRL)
        //And (CTRL, 0x1C, CTRL)

          If (LNotEqual(Arg1,one)) { // unknown revision
            Or(CDW1,0x08,CDW1)
          }

          If(LNotEqual(CDW3,CTRL)) { // capabilities bits were masked
            Or(CDW1,0x10,CDW1)
          }
          //
          // update DWORD3 in the buffer
          //
          Store(CTRL,CDW3)
          Return(Arg3)

      } Else {
        //
        // Just indicate unrecognized UUID
        // Leave it at that
        //
        Or (CDW1,4,CDW1)
        Store (0xEE, IO80)
        Return(Arg3)
      }
  }

  Method(_STA){
    // Check if Virtual FPGA is present
    If(And (FKPB ,0x08)) {
      // Virtual FPGA present and logically online
      Return(0x0F)
    }
    // Virtual FPGA logically offline
    Return(0x00) 

  } // End Method STA

  Name (RBUF, ResourceTemplate () {
      WORDBusNumber(          // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
      ResourceProducer,       // bit 0 of general flags is 1
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,              // PosDecode
      0x0000,                 // Granularity 
      0x0000,                 // Min         
      0x0000,                 // Max         
      0x0000,                 // Translation
      0x0001,                 // Range Length = Max-Min+1 
      ,
      ,
      FIXB
    )
    
    
  })

  Method(_CRS, 0x0, NotSerialized) {
    Return (RBUF)
  }
